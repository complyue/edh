
{
  # an event sink in Edh is a broadcast channel per se

  # each evaluation of the `sink` literal creates a new unique event sink
  # value (i.e. a separate broadcast channel)
  evs = sink


  # an async for loop shares current scope as it runs concurrently, so we use
  # separate attributes as different counters
  async'n = 0; sync'n = 0


  # the event stream through an event sink can be consumed asynchronously with
  # arbitrary concurrency
  go for async'ev from evs do console.info
  <| '  async got ðŸ“† event#' ++ ( async'n+=1 ) ++ ' ðŸŽ‰  ' ++ async'ev


  # the event stream through an event sink can also be perceived
  # (captured & filtered by pattern-matching) during running of other
  # transactions on a thread
  #
  # event perceivers' execution is interleaved with sequential transactions on
  # the thread, arrival of perceived events preempts stem transactions in the
  # thread's task queue
  perceive evs { sync'ev } -> {
    console.info
    <| '   sync got ðŸ“† event#' ++ ( sync'n+=1 ) ++ ' ðŸŽ‰  ' ++ sync'ev

    # note a guarded conditional match is necessary when we use the branch
    # syntax (operator), because the current contextual-match-target-value
    # is the perceived event value here
    ; |sync'n >= 3 -> {
      break # `break` from a perceiver terminates current thread
    }

    # or the old-school `if-then` can be used of course
    if sync'n >=3 then {
      break # `break` from a perceiver terminates current thread
    }
  }


  # deferred actions are scheduled to execute on termination of current thread
  defer {
    # since the perceiver above is installed to the main thread of the program,
    # it'll break the whole program (by terminating the main thread), the
    # async event processing thread will be aborted then.
    console.info<| "We're all done."
  }


  # keep producing events from another async for loop
  go for nanos from console.everySeconds( 1 )
  do evs <- 'time now (in nanos) is ' ++ nanos
}

# keep the program from quitting too early, in case this file is redirected as
# stdin to an Edh interpreter
for _ from console.everySeconds( 5 ) do { break }
