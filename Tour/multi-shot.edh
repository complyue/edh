
{
  method asyncRisk(n) {
    defer {
      ;-1<| 'async defer cleanup #' ++ n
    }

    throw '!AsyncFailure#' ++ n

    ;-1<| 'not a chance to see this'
  }

  {
    for i from range(3) do {
      go asyncRisk(i)
    }
  } $=> {  # this exception handler will be triggered to run
    # in multiple forked threads (forkees), but its recover
    # continuation will only run by the thread installed it,
    # i.e. the forker thread.
    { exc } -> {
      ;-1<| 'handling ' ++ exc
    }
  }

  # too obviously, but it could really go wrong with,
  # a continuation based implementation
  ;-1<| 'this should run only once by forker thread'

  for _ from console.everyMillis(10) do { break }

  ;-1<| 'all done.'
}


# Note:
# we use negative log level to trigger debug trace, so thread
# id is shown as well;
# and the minus sign (-) will parse as infix subtraction
# operator if following some expression, so we prefix it with
# a semicolon (;) to disambiguate;
# then `;-1<| 'xxx'` reads `trace "xxx"` with extra info
