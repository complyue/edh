
{

  class MetaSuper1 {

    # handles magic method resolution on a magic child (referred to by `that`),
    # for:
    #    *) `this.xxx` (@<-)
    #    *) `this.xxx = yyy` (<-@)
    #    *) `obj.xxx` (@<-*)
    #    *) `obj.xxx = yyy` (*<-@)
    #    *) `extends xxx` (<-^)
    # where `this`, `obj` and procedure context this is a grand business child
    method (!<-) (magicSpell) {
      30<| 'casting spell (' ++ magicSpell ++ ')'

      # treat explicit nil/false still as not present
      that?$magicSpell |> { continue }
    }

    # handles super attribute resolution, on a magic child (referred to by `that`),
    # for `super.xxx` from a grand business child
    method (@<-^) (attrKey) {
      20<| 'getting super.' ++ attrKey ++ ' from the super'

      case that?$attrKey of {
        nil -> { continue }  # to consult next super
        { n } -> n / 2  # can do some transformation here
      }
    }

  }

}

{

  class Super1 {

    # handles `extends` from a business child (referred to by `that`),
    # `this` is the new super object being added to `that`, if this 
    # method err out, the inheritance relationship won't be established.
    # `boScope` is a scope object reflecting `that` object's entity
    method (<-^) (boScope) {
      20<| 'connecting child of ' ++ constructor(that)
        ++ ' which is defined at: ' ++ boScope.lexiLoc()
    }

    # handles `this.xxx` from a business child (referred to by `that`)
    method (@<-) (attrKey) {
      20<| 'getting this.' ++ attrKey
      continue  # try next super, or fail as normally if no such attr
    }

    # handles `obj.xxx` from a business child (referred to by `that`)
    method (@<-*) (attrKey) {
      20<| 'getting ' ++ attrKey ++ ' from the obj'
      that?$attrKey  # giving out nil if no such attr
    }

    # a default attribute value
    n = 23

    # handles `this.xxx = yyy` from a business child (referred to by `that`)
    method (<-@) (attrKey, attrVal) {
      20<| 'setting this.' ++ attrKey ++ ' to ' ++ attrVal
      that$attrKey = attrVal
    }

    # handles `obj.xxx = yyy` for `obj` being a business child (referred to by `that`)
    method (*<-@) (attrKey, attrVal) {
      20<| 'setting ' ++ attrKey ++ ' to ' ++ attrVal ++ ' for the obj'
      that$attrKey = attrVal
    }

    extends MetaSuper1()

  }

  class BusObj1 {

    _selfScope = scope()  # for debug purpose

    method n () {
      30<| 'super provided n - ' ++ super?n
      this.n1
    }

    this.n1 = 7

    this.n2 = 3

    extends Super1()

  }

}

bo1 = BusObj1()

{

  20<| 'bo1.n() is ' ++ bo1.n() 

  20<| 'bo1.n1 is ' ++ bo1.n1

  20<| 'bo1.n2 is ' ++ bo1.n2

  20<| 'bo1.n3 is ' ++ bo1.n3

}

{
  bo1.n1 = 5
  20<| 'bo1.n1 set to ' ++ bo1.n1
}
