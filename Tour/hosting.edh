{#
 # the hosting pattern
 #
 # hosting is about to provide scoped effects (values including object
 # references, methods etc.) to computations (procedures) aware of such an
 # effectful environment, and tend to consume some or all of the effectful
 # artifacts in context.
 #
 # and this is the only way for a called procedure to escape from its call
 # site (contextual parent call stack), i.e. to execute in another effectful
 # context
 #}


class Host {

  method __init__(*** envInitArgs ) {
    # the stream of actions to be hosted
    this.actionSink = sink
    # the signal/status indicating whehter this host is ready
    this.ready = sink
    # the signal for this host to reach end-of-life
    this.eol = sink
  }

  # start the actual hosting business
  #
  # should think carefully about from which context to call this method,
  # try avoid leaking effects to the actions to be hosted
  method start() go this._hostingThread()

  # only meant to be called by this.start()
  method _hostingThread() {
    # mark not ready anyway upon the hosting thread's termination
    defer { this.ready<-false }

    # would use envInitArgs to initialize the effectful hosting environment,
    # e.g. setup a database connection pool etc.

    # demonstrate some effectful constant
    effect ctxConstX = 333

    # demonstrate some effectiful variable
    # note a namespace is needed bcoz any procedure (as a method is per se)
    # has no way to assign to an attribute of its lexical outer scope
    namespace ctxVars (
      y= 555
    ) {
      export method incY() ai this.y += 1
    }
    effect method getY() ctxVars.y
    # expose all exported artifacts from the namespace as effects
    effect import * ctxVars

    # demonstrate some effectful resource
    ctxResZ = ( establishConnToSomeResource!sink )
    # would to setup some reactive computations responding to state change
    # over ctxResZ, implementing the consequences
    effect {
      method updateState( state ) {
        ctxResZ <- state
      }
      method currState() {
        ctxResZ.mrv # most recent value residing in the event sink
      }
    }

    perceive (
      # realize the semantic of this.ready as waitable signal
      ( outlet=this.actionSink ) | producer _ ( outlet ) {
        this.ready<-true
      }
    ) { act } -> {
      if allowTermByAction!false
      # act can `return {break}` to terminate this thread
      then act()
      # this thread keeps running even act `return {break}`
      else void act()
    }

    # keep this thread running until end-of-life signal
    for _ from this.eol do break
  }

  method stop() this.eol<-true

  method waitReady() for ready from this.ready do return ready

  method schedule( act ) {
    if not this.waitReady()
    then throw UsageError( 'scheduling to a stopped host' )

    this.actionSink <- act
  }

}


# %%
host = Host( some= 'args', to= 'init', the= 'resources', )

# %%
# should really call this from some carefully chosen pure context,
# possibly with some postmortem exception handler
host.start()

# %%
host.schedule( () => {

    console.info<| 'x is: ' ++ perform ctxConstX

    console.info<| 'y is: ' ++ perform getY()

    perform incY()
    console.info<| 'y increased is: ' ++ perform getY()

    console.info<| 'state now is: ' ++ case perform currState() of {
      nil -> '<vacuum>'
      { state } -> 'matter of ' ++ state
    }

    perform updateState( 3322 )
    console.info<| 'state then is: ' ++ perform currState()

} )

# %%
# let the main thread wait a tiny bit, to see the result
for _ from console.everyMillis( 20 ) do break
