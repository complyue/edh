
{
  # partial functions

  method f( a, b, c ) {
    console.print( 'this is f()', a=a, b=b, c=c )
  }

  # partial is used to create partially applied functions
  # TODO add `partial` to syntax highlighter as lib utilities
  f1 = partial ( 1, 2 ) ( f )

  # (|) pipe operator is flipped function application, then f2 is equivalent
  # to f1
  let f2 = f|partial( 1, 2 )

  # note the pipe (|) operator has a rather low precedence -5, lower than the
  # assign (=) operator's precedence 0, so if not writing it as a `let`
  # statement, parenthesis is necessary, then f3 is equivalent too
  f3 = ( f|partial( 1, 2 ) )

}
f1( 3 )
f2( 5 )
f3( 7 )

{
  # args fusion

  # with respecting to functional application via ($) or (|), if an ArgsPack
  # takes the place of a procedure (the callee), it just absorbs the other
  # positional argument or a whole arguments pack, to form a new ArgsPack

  ( 2, 11, n=3 ) $ ( 9, 7, m=5 ) | console.print

  ( 9, 7, m=5 ) | ( 2, 11, n=3 ) | console.print

}

{
  # decorator

  interpreter decor( caller, fe ) case caller.eval( fe ) of { f } -> {
    # leverage a namespace and the separate scope of its __call__ method,
    # to avoid name clashing with `f.name`
    case f.name | namespace _ ( f=f ) method __call__ ( fn )
    method @fn (*** apk ) {
      console.info<| 'Calling procedure `' ++this.f.name++ '` with: ' ++ apk
      this.f(*** apk )
    } of { wrapper } -> caller.put( f.name: wrapper )
  }

  # ($) dollar operator is function application similar to ($) in Haskell

  decor$
  method g ( a, b, c ) {
    console.print( 'this is g()', a=a, b=b, c=c )
  }

}
g( 1, 2, 3 )
