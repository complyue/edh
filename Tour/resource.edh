
{

  # a generator can be used to implement sth like Python's
  # context manager
  generator withResource(resArgs) {
    console.info<| 'allocating ' ++ resArgs
    res = 'allocated [' ++ resArgs ++ ']'
    {
      # unlike in Python, a generator procedure in Edh can
      # only be call by a for-from-do loop, and exceptions
      # occurred in that do block will be propagated to the
      # yield expression here
      yield res
    } @=> {  # unlike generator in Python, this finally
      # block is guaranteed to run
      console.info<| 'releaing [' ++ resArgs ++ ']'
    }
  }

  # the for-from-do loop can act like Python's `with`
  for res from withResource('some-resource') do {
    console.info<| 'using ' ++ res
    throw IOError('some failure')
    break  # or no exception but loop broken
    return nil # or early return from the loop
  }

}
