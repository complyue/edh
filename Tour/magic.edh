
{

  class Tensor {

    method __init__ ( name as this.name ) pass

    method __repr__ () this.name


    method (+) ( other ) case type( other ) of {
      # add to a constant
      DecimalType -> Tensor( name= '(' ++ this.name ++ '+' ++ other ++ ')' )

      case other of { { Tensor:_ } } -> {
        # add to another Tensor
        return Tensor( name= '(' ++ this.name ++ '+' ++ other.name ++ ')' )
      }

      return NA # not-applicable - similar to NotImplemented in Python
    }
    ; (+@) = (+)


    method (*) ( other ) case type( other ) of {
      # mul to a constant
      DecimalType -> Tensor( name= '(' ++ this.name ++ '*' ++ other ++ ')' )

      case other of { { Tensor:_ } } -> {
        # mul to another Tensor
        return Tensor( name= '(' ++ this.name ++ '*' ++ other.name ++ ')' )
      }

      return NA # not-applicable - similar to NotImplemented in Python
    }
    ; (*@) = (*)


    method (-) ( other ) case type( other ) of {
      # sub a constant
      DecimalType -> Tensor( name= '(' ++ this.name ++ '-' ++ other ++ ')' )

      case other of { { Tensor:_ } } -> {
        # sub another Tensor
        return Tensor( name= '(' ++ this.name ++ '-' ++ other.name ++ ')' )
      }

      return NA # not-applicable - similar to NotImplemented in Python
    }

    method (-@) ( other ) case type( other ) of {
      # sub from a constant
      DecimalType -> Tensor( name= '(' ++ other ++ '-' ++ this.name ++ ')' )

      case other of { { Tensor:_ } } -> {
        error( 'not resolved to magic (-) of ' ++ lhv ++ ' ?!' )
      }

      return NA # not-applicable - similar to NotImplemented in Python
    }


    method (/) ( other ) case type( other ) of {
      # div by a constant
      DecimalType -> Tensor( name= '(' ++ this.name ++ '/' ++ other ++ ')' )

      case other of { { Tensor:_ } } -> {
        # div by another Tensor
        return Tensor( name= '(' ++ this.name ++ '/' ++ other.name ++ ')' )
      }

      return NA # not-applicable - similar to NotImplemented in Python
    }

    method (/@) ( other ) case type( other ) of {
      # div to a constant
      DecimalType -> Tensor( name= '(' ++ other ++ '/' ++ this.name ++ ')' )

      case other of { { Tensor:_ } } -> {
        error( 'not resolved to magic (/) of ' ++ lhv ++ ' ?!' )
      }

      return NA # not-applicable - similar to NotImplemented in Python
    }

  }

}

let ( x, y ) = ( Tensor( 'x' ), Tensor( 'y' ) )

x + y
x + 5
5 + x
x - 5
5 - x
x * y
x / y
x * 3
3 * x
x / 3
3 / x

3 + x / 7 * ( y - 5 )

x + 'z'
