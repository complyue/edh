
{#
 # block comments
 #}

# line comments


# method definitions (with effects)

method effectfulHello() void {
  effect greetingWord = 'Hello'

  perform greetingPhrase() | console.print
}

method effectfulConsumer() void {
  effect method greetingPhrase() {
    return behave greetingWord ++ ', world!'
  }

  effectfulHello()
}


# procedure call

effectfulConsumer()


# simple class (ADT)

data User( id_, name ) {
  method __str__() 'User: ' ++ this.name
}


# normal classes

class Animal {

  method __init__(
    nLegs as this.nLegs,
    ***_
  ) pass

  method say( msg ) NA

}

class Commodity {

  method __init__(
    price as this.price = nan,
    ***_
  ) {
    this.originalPrice = this.price
  }

  property$
  method buyable() this.price is not nan

  property$
  method discount() 1.0-this.price/this.originalPrice

  setter$
  method discount( newDscnt ) {
    this.price = ( 1.0-newDscnt ) * this.originalPrice
  }

  askPriceFor :: ( User, ) -> DecimalType
  method askPriceFor( _buyer ) this.price

}

class Cat extends ( Commodity, Animal )

class Catus { extends Cat

  method say( msg ) void {
    perform vocalFrom( that, 'Meow, ' ++ msg )
  }

}

class Lion { extends Cat

  property$
  method buyable() false

  method askPriceFor( buyer ) {
    if buyer.fromDeepNet !false
    then this.originalPrice * 3
    else throw Exception( 'illegal to trade a lion for ' ++ desc( buyer ) )
  }

  method say( msg ) void {
    perform vocalFrom( that, 'Roar, ' ++ msg )
  }

}
